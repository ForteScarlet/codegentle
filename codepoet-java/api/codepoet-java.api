public abstract interface class love/forte/codepoet/java/AnnotationSpec : love/forte/codepoet/java/CodeEmitter {
	public static final field Companion Llove/forte/codepoet/java/AnnotationSpec$Companion;
	public static final field VALUE Ljava/lang/String;
	public static fun builder (Llove/forte/codepoet/java/ClassName;)Llove/forte/codepoet/java/AnnotationSpec$Builder;
	public fun emit (Llove/forte/codepoet/java/CodeWriter;)V
	public abstract fun getMembers ()Ljava/util/Map;
	public abstract fun getType ()Llove/forte/codepoet/java/TypeName;
	public abstract fun toBuilder ()Llove/forte/codepoet/java/AnnotationSpec$Builder;
}

public final class love/forte/codepoet/java/AnnotationSpec$Builder {
	public final fun addMember (Ljava/lang/String;Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/AnnotationSpec$Builder;
	public final fun addMember (Ljava/lang/String;Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/AnnotationSpec$Builder;
	public final fun addMember (Ljava/lang/String;Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/AnnotationSpec$Builder;
	public final fun build ()Llove/forte/codepoet/java/AnnotationSpec;
	public final fun getMembers ()Ljava/util/Map;
}

public final class love/forte/codepoet/java/AnnotationSpec$Companion {
	public static final field VALUE Ljava/lang/String;
	public final fun builder (Llove/forte/codepoet/java/ClassName;)Llove/forte/codepoet/java/AnnotationSpec$Builder;
}

public final class love/forte/codepoet/java/AnnotationSpecs {
	public static final fun AnnotationSpec (Llove/forte/codepoet/java/ClassName;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/AnnotationSpec;
	public static synthetic fun AnnotationSpec$default (Llove/forte/codepoet/java/ClassName;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/AnnotationSpec;
	public static final fun addMember (Llove/forte/codepoet/java/AnnotationSpec$Builder;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/AnnotationSpec$Builder;
	public static synthetic fun addMember$default (Llove/forte/codepoet/java/AnnotationSpec$Builder;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/AnnotationSpec$Builder;
}

public abstract interface class love/forte/codepoet/java/AnnotationTypeSpec : love/forte/codepoet/java/TypeSpec {
	public abstract fun getName ()Ljava/lang/String;
	public fun getSuperclass ()Llove/forte/codepoet/java/TypeName;
	public fun getSuperinterfaces ()Ljava/util/List;
}

public final class love/forte/codepoet/java/AnnotationTypeSpec$Builder : love/forte/codepoet/java/TypeSpec$Builder {
	public fun <init> (Ljava/lang/String;)V
	public fun build ()Llove/forte/codepoet/java/AnnotationTypeSpec;
	public synthetic fun build ()Llove/forte/codepoet/java/TypeSpec;
	public synthetic fun getSelf ()Llove/forte/codepoet/java/TypeSpec$Builder;
}

public abstract interface class love/forte/codepoet/java/AnonymousClassTypeSpec : love/forte/codepoet/java/TypeSpec {
	public abstract fun emit (Llove/forte/codepoet/java/CodeWriter;Ljava/lang/String;Ljava/util/Set;)V
	public fun emit (Llove/forte/codepoet/java/CodeWriter;Ljava/util/Set;)V
	public static synthetic fun emit$default (Llove/forte/codepoet/java/AnonymousClassTypeSpec;Llove/forte/codepoet/java/CodeWriter;Ljava/lang/String;Ljava/util/Set;ILjava/lang/Object;)V
	public abstract fun getAnonymousTypeArguments ()Llove/forte/codepoet/java/CodeBlock;
	public fun getName ()Ljava/lang/String;
}

public final class love/forte/codepoet/java/AnonymousClassTypeSpec$Builder : love/forte/codepoet/java/TypeSpec$Builder {
	public fun <init> (Llove/forte/codepoet/java/CodeBlock;)V
	public fun build ()Llove/forte/codepoet/java/AnonymousClassTypeSpec;
	public synthetic fun build ()Llove/forte/codepoet/java/TypeSpec;
	public final fun getAnonymousTypeArguments ()Llove/forte/codepoet/java/CodeBlock;
	public synthetic fun getSelf ()Llove/forte/codepoet/java/TypeSpec$Builder;
}

public abstract interface class love/forte/codepoet/java/ArrayTypeName : love/forte/codepoet/java/TypeName {
	public abstract fun annotated (Ljava/util/List;)Llove/forte/codepoet/java/ArrayTypeName;
	public fun annotated ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/ArrayTypeName;
	public synthetic fun annotated ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/TypeName;
	public fun emit (Llove/forte/codepoet/java/CodeWriter;)V
	public abstract fun getComponentType ()Llove/forte/codepoet/java/TypeName;
	public fun isPrimitive ()Z
	public abstract fun withoutAnnotations ()Llove/forte/codepoet/java/ArrayTypeName;
}

public final class love/forte/codepoet/java/ArrayTypeNames {
	public static final fun of (Ljava/lang/reflect/GenericArrayType;)Llove/forte/codepoet/java/ArrayTypeName;
	public static final fun of (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/ArrayTypeName;
	public static final fun toArrayTypeName (Ljava/lang/reflect/GenericArrayType;)Llove/forte/codepoet/java/ArrayTypeName;
}

public abstract interface class love/forte/codepoet/java/ClassName : java/lang/Comparable, love/forte/codepoet/java/TypeName {
	public static final field Companion Llove/forte/codepoet/java/ClassName$Companion;
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Llove/forte/codepoet/java/ClassName;)I
	public fun getCanonicalName ()Ljava/lang/String;
	public abstract fun getEnclosingClassName ()Llove/forte/codepoet/java/ClassName;
	public abstract fun getPackageName ()Ljava/lang/String;
	public fun getReflectionName ()Ljava/lang/String;
	public abstract fun getSimpleName ()Ljava/lang/String;
	public abstract fun getSimpleNames ()Ljava/util/List;
	public fun getTopLevelClassName ()Llove/forte/codepoet/java/ClassName;
	public fun isPrimitive ()Z
	public abstract fun nestedClass (Ljava/lang/String;)Llove/forte/codepoet/java/ClassName;
	public abstract fun peerClass (Ljava/lang/String;)Llove/forte/codepoet/java/ClassName;
}

public final class love/forte/codepoet/java/ClassName$Builtins {
	public static final field BOXED_BOOLEAN Llove/forte/codepoet/java/ClassName;
	public static final field BOXED_BYTE Llove/forte/codepoet/java/ClassName;
	public static final field BOXED_CHAR Llove/forte/codepoet/java/ClassName;
	public static final field BOXED_DOUBLE Llove/forte/codepoet/java/ClassName;
	public static final field BOXED_FLOAT Llove/forte/codepoet/java/ClassName;
	public static final field BOXED_INT Llove/forte/codepoet/java/ClassName;
	public static final field BOXED_LONG Llove/forte/codepoet/java/ClassName;
	public static final field BOXED_SHORT Llove/forte/codepoet/java/ClassName;
	public static final field BOXED_VOID Llove/forte/codepoet/java/ClassName;
	public static final field INSTANCE Llove/forte/codepoet/java/ClassName$Builtins;
	public static final field OBJECT Llove/forte/codepoet/java/ClassName;
	public static final field OVERRIDE Llove/forte/codepoet/java/ClassName;
	public static final field STRING Llove/forte/codepoet/java/ClassName;
	public static final field SUPPRESS_WARNINGS Llove/forte/codepoet/java/ClassName;
}

public final class love/forte/codepoet/java/ClassName$Companion {
}

public final class love/forte/codepoet/java/ClassName_jvmKt {
	public static final fun of (Ljava/lang/Class;)Llove/forte/codepoet/java/ClassName;
	public static final fun of (Lkotlin/reflect/KClass;)Llove/forte/codepoet/java/ClassName;
}

public final class love/forte/codepoet/java/ClassNames {
	public static final fun of (Ljava/lang/String;)Llove/forte/codepoet/java/ClassName;
	public static final fun of (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Llove/forte/codepoet/java/ClassName;
}

public abstract class love/forte/codepoet/java/CodeArgumentPart : love/forte/codepoet/java/CodePart {
}

public abstract interface class love/forte/codepoet/java/CodeBlock : love/forte/codepoet/java/CodeEmitter {
	public static final field Companion Llove/forte/codepoet/java/CodeBlock$Companion;
	public abstract fun addTo (Llove/forte/codepoet/java/CodeBlock$Builder;)V
	public static fun builder ()Llove/forte/codepoet/java/CodeBlock$Builder;
	public fun emit (Llove/forte/codepoet/java/CodeWriter;)V
	public abstract fun emit (Llove/forte/codepoet/java/CodeWriter;Z)V
	public static synthetic fun emit$default (Llove/forte/codepoet/java/CodeBlock;Llove/forte/codepoet/java/CodeWriter;ZILjava/lang/Object;)V
	public abstract fun isEmpty ()Z
	public abstract fun toBuilder ()Llove/forte/codepoet/java/CodeBlock$Builder;
}

public final class love/forte/codepoet/java/CodeBlock$Builder {
	public final fun add (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun add (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun add (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun addStatement (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun addStatement (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun addStatement (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun beginControlFlow (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun build ()Llove/forte/codepoet/java/CodeBlock;
	public final fun clear ()Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun endControlFlow ()Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun endControlFlow (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun indent ()Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun isEmpty ()Z
	public final fun nextControlFlow (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun unindent ()Llove/forte/codepoet/java/CodeBlock$Builder;
}

public final class love/forte/codepoet/java/CodeBlock$Companion {
	public final fun builder ()Llove/forte/codepoet/java/CodeBlock$Builder;
}

public final class love/forte/codepoet/java/CodeBlocks {
	public static final fun CodeBlock (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/CodeBlock;
	public static final fun CodeBlock (Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/CodeBlock;
	public static synthetic fun CodeBlock$default (Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/CodeBlock;
	public static final fun add (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static synthetic fun add$default (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static final fun addStatement (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static synthetic fun addStatement$default (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static final fun beginControlFlow (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static synthetic fun beginControlFlow$default (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static final fun endControlFlow (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static synthetic fun endControlFlow$default (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static final fun nextControlFlow (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static synthetic fun nextControlFlow$default (Llove/forte/codepoet/java/CodeBlock$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/CodeBlock$Builder;
	public static final fun of ()Llove/forte/codepoet/java/CodeBlock;
	public static final fun of (Ljava/lang/String;Ljava/lang/Iterable;)Llove/forte/codepoet/java/CodeBlock;
	public static final fun of (Ljava/lang/String;Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeBlock;
	public static final fun of (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeBlock;
	public static final fun of (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/CodeBlock;
}

public abstract class love/forte/codepoet/java/CodePart {
	public static final field Companion Llove/forte/codepoet/java/CodePart$Companion;
	public static final field PLACEHOLDER Ljava/lang/String;
	public static final fun indent ()Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun indent (I)Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun literal (Ljava/lang/Object;)Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun name (Ljava/lang/Object;)Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun name (Ljava/lang/String;)Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun skip ()Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun statementBegin ()Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun statementEnd ()Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun string (Ljava/lang/String;)Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun type (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun unindent ()Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun unindent (I)Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun wrappingSpace ()Llove/forte/codepoet/java/CodeArgumentPart;
	public static final fun zeroWidthSpace ()Llove/forte/codepoet/java/CodeArgumentPart;
}

public final class love/forte/codepoet/java/CodePart$Companion {
	public final fun indent ()Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun indent (I)Llove/forte/codepoet/java/CodeArgumentPart;
	public static synthetic fun indent$default (Llove/forte/codepoet/java/CodePart$Companion;IILjava/lang/Object;)Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun literal (Ljava/lang/Object;)Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun name (Ljava/lang/Object;)Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun name (Ljava/lang/String;)Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun skip ()Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun statementBegin ()Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun statementEnd ()Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun string (Ljava/lang/String;)Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun type (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun unindent ()Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun unindent (I)Llove/forte/codepoet/java/CodeArgumentPart;
	public static synthetic fun unindent$default (Llove/forte/codepoet/java/CodePart$Companion;IILjava/lang/Object;)Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun wrappingSpace ()Llove/forte/codepoet/java/CodeArgumentPart;
	public final fun zeroWidthSpace ()Llove/forte/codepoet/java/CodeArgumentPart;
}

public abstract interface class love/forte/codepoet/java/CodeValue : love/forte/codepoet/java/CodeEmitter {
	public static final field Companion Llove/forte/codepoet/java/CodeValue$Companion;
	public static fun builder (Ljava/lang/String;)Llove/forte/codepoet/java/CodeValue$Builder;
	public fun emit (Llove/forte/codepoet/java/CodeWriter;)V
	public abstract fun emit (Llove/forte/codepoet/java/CodeWriter;Z)V
	public abstract fun getParts ()Ljava/util/List;
}

public final class love/forte/codepoet/java/CodeValue$Builder {
	public final fun build ()Llove/forte/codepoet/java/CodeValue;
	public final fun getFormat ()Ljava/lang/String;
	public final fun value (Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeValue$Builder;
	public final fun values (Ljava/lang/Iterable;)Llove/forte/codepoet/java/CodeValue$Builder;
	public final fun values ([Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeValue$Builder;
}

public final class love/forte/codepoet/java/CodeValue$Companion {
	public final fun builder (Ljava/lang/String;)Llove/forte/codepoet/java/CodeValue$Builder;
}

public final class love/forte/codepoet/java/CodeValueKt {
	public static final fun CodeValue (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/CodeValue;
	public static synthetic fun CodeValue$default (Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/CodeValue;
	public static final fun indent (Llove/forte/codepoet/java/CodeValue$Builder;I)Llove/forte/codepoet/java/CodeValue$Builder;
	public static synthetic fun indent$default (Llove/forte/codepoet/java/CodeValue$Builder;IILjava/lang/Object;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun literal (Llove/forte/codepoet/java/CodeValue$Builder;Ljava/lang/Object;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun name (Llove/forte/codepoet/java/CodeValue$Builder;Ljava/lang/Object;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun name (Llove/forte/codepoet/java/CodeValue$Builder;Ljava/lang/String;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun of (Ljava/lang/String;Ljava/lang/Iterable;)Llove/forte/codepoet/java/CodeValue;
	public static final fun of (Ljava/lang/String;Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeValue;
	public static final fun of (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/CodeValue;
	public static final fun skip (Llove/forte/codepoet/java/CodeValue$Builder;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun statementBegin (Llove/forte/codepoet/java/CodeValue$Builder;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun statementEnd (Llove/forte/codepoet/java/CodeValue$Builder;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun string (Llove/forte/codepoet/java/CodeValue$Builder;Ljava/lang/String;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun type (Llove/forte/codepoet/java/CodeValue$Builder;Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun unindent (Llove/forte/codepoet/java/CodeValue$Builder;I)Llove/forte/codepoet/java/CodeValue$Builder;
	public static synthetic fun unindent$default (Llove/forte/codepoet/java/CodeValue$Builder;IILjava/lang/Object;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun wrappingSpace (Llove/forte/codepoet/java/CodeValue$Builder;)Llove/forte/codepoet/java/CodeValue$Builder;
	public static final fun zeroWidthSpace (Llove/forte/codepoet/java/CodeValue$Builder;)Llove/forte/codepoet/java/CodeValue$Builder;
}

public final class love/forte/codepoet/java/CodeWriter$Companion {
}

public abstract interface class love/forte/codepoet/java/EnumTypeSpec : love/forte/codepoet/java/TypeSpec {
	public abstract fun getEnumConstants ()Ljava/util/Map;
	public abstract fun getName ()Ljava/lang/String;
	public fun getSuperclass ()Llove/forte/codepoet/java/TypeName;
}

public final class love/forte/codepoet/java/EnumTypeSpec$Builder : love/forte/codepoet/java/TypeSpec$Builder {
	public fun <init> (Ljava/lang/String;)V
	public final fun addEnumConstant (Ljava/lang/String;Llove/forte/codepoet/java/AnonymousClassTypeSpec;)Llove/forte/codepoet/java/EnumTypeSpec$Builder;
	public fun build ()Llove/forte/codepoet/java/EnumTypeSpec;
	public synthetic fun build ()Llove/forte/codepoet/java/TypeSpec;
	public synthetic fun getSelf ()Llove/forte/codepoet/java/TypeSpec$Builder;
}

public abstract interface class love/forte/codepoet/java/FieldSpec : love/forte/codepoet/java/CodeEmitter {
	public static final field Companion Llove/forte/codepoet/java/FieldSpec$Companion;
	public static fun builder (Llove/forte/codepoet/java/TypeName;Ljava/lang/String;[Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public fun emit (Llove/forte/codepoet/java/CodeWriter;)V
	public abstract fun emit (Llove/forte/codepoet/java/CodeWriter;Ljava/util/Set;)V
	public static synthetic fun emit$default (Llove/forte/codepoet/java/FieldSpec;Llove/forte/codepoet/java/CodeWriter;Ljava/util/Set;ILjava/lang/Object;)V
	public abstract fun getAnnotations ()Ljava/util/List;
	public abstract fun getInitializer ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getJavadoc ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getModifiers ()Ljava/util/Set;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getType ()Llove/forte/codepoet/java/TypeName;
	public fun hasModifier (Ljavax/lang/model/element/Modifier;)Z
	public abstract fun toBuilder ()Llove/forte/codepoet/java/FieldSpec$Builder;
}

public final class love/forte/codepoet/java/FieldSpec$Builder {
	public final fun addAnnotation (Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun addAnnotation (Llove/forte/codepoet/java/ClassName;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun addAnnotations (Ljava/lang/Iterable;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun addAnnotations ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun addJavadoc (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun addJavadoc (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun addJavadoc (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun addModifier (Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun addModifiers (Ljava/lang/Iterable;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun addModifiers ([Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun build ()Llove/forte/codepoet/java/FieldSpec;
	public final fun getName ()Ljava/lang/String;
	public final fun getType ()Llove/forte/codepoet/java/TypeName;
	public final fun initializer (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun initializer (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public final fun initializer (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/FieldSpec$Builder;
}

public final class love/forte/codepoet/java/FieldSpec$Companion {
	public final fun builder (Llove/forte/codepoet/java/TypeName;Ljava/lang/String;[Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/FieldSpec$Builder;
}

public final class love/forte/codepoet/java/FieldSpecs {
	public static final fun FieldSpec (Ljava/lang/reflect/Type;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/FieldSpec;
	public static final fun FieldSpec (Llove/forte/codepoet/java/TypeName;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/FieldSpec;
	public static synthetic fun FieldSpec$default (Ljava/lang/reflect/Type;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/FieldSpec;
	public static synthetic fun FieldSpec$default (Llove/forte/codepoet/java/TypeName;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/FieldSpec;
	public static final fun addJavadoc (Llove/forte/codepoet/java/FieldSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public static synthetic fun addJavadoc$default (Llove/forte/codepoet/java/FieldSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public static final fun initializer (Llove/forte/codepoet/java/FieldSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/FieldSpec$Builder;
	public static synthetic fun initializer$default (Llove/forte/codepoet/java/FieldSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/FieldSpec$Builder;
}

public abstract interface annotation class love/forte/codepoet/java/InternalApi : java/lang/annotation/Annotation {
}

public abstract interface class love/forte/codepoet/java/JavaFile : love/forte/codepoet/java/CodeEmitter {
	public abstract fun getAlwaysQualify ()Ljava/util/Set;
	public abstract fun getFileComment ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getIndent ()Ljava/lang/String;
	public abstract fun getPackageName ()Ljava/lang/String;
	public abstract fun getSkipJavaLangImports ()Z
	public abstract fun getStaticImports ()Ljava/util/Set;
	public abstract fun getType ()Llove/forte/codepoet/java/TypeSpec;
	public abstract fun writeTo (Ljava/lang/Appendable;)V
}

public final class love/forte/codepoet/java/JavaFile$Builder {
	public final fun addFileComment (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/JavaFile$Builder;
	public final fun addFileComment (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/JavaFile$Builder;
	public final fun addFileComment (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/JavaFile$Builder;
	public final fun addStaticImport (Ljava/lang/String;)Llove/forte/codepoet/java/JavaFile$Builder;
	public final fun addStaticImport (Llove/forte/codepoet/java/ClassName;Ljava/lang/Iterable;)Llove/forte/codepoet/java/JavaFile$Builder;
	public final fun addStaticImport (Llove/forte/codepoet/java/ClassName;[Ljava/lang/String;)Llove/forte/codepoet/java/JavaFile$Builder;
	public final fun build ()Llove/forte/codepoet/java/JavaFile;
	public final fun getPackageName ()Ljava/lang/String;
	public final fun getType ()Llove/forte/codepoet/java/TypeSpec;
	public final fun indent (Ljava/lang/String;)Llove/forte/codepoet/java/JavaFile$Builder;
	public final fun skipJavaLangImports ()Llove/forte/codepoet/java/JavaFile$Builder;
	public final fun skipJavaLangImports (Z)Llove/forte/codepoet/java/JavaFile$Builder;
}

public final class love/forte/codepoet/java/JavaFiles {
	public static final fun addFileComment (Llove/forte/codepoet/java/JavaFile$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/JavaFile$Builder;
	public static synthetic fun addFileComment$default (Llove/forte/codepoet/java/JavaFile$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/JavaFile$Builder;
	public static final fun writeTo (Llove/forte/codepoet/java/JavaFile;Ljava/io/File;)V
	public static final fun writeTo (Llove/forte/codepoet/java/JavaFile;Ljava/io/File;Ljava/nio/charset/Charset;)V
	public static final fun writeTo (Llove/forte/codepoet/java/JavaFile;Ljava/nio/file/Path;)V
	public static final fun writeTo (Llove/forte/codepoet/java/JavaFile;Ljava/nio/file/Path;Ljava/nio/charset/Charset;)V
	public static synthetic fun writeTo$default (Llove/forte/codepoet/java/JavaFile;Ljava/io/File;Ljava/nio/charset/Charset;ILjava/lang/Object;)V
	public static synthetic fun writeTo$default (Llove/forte/codepoet/java/JavaFile;Ljava/nio/file/Path;Ljava/nio/charset/Charset;ILjava/lang/Object;)V
}

public abstract interface class love/forte/codepoet/java/MethodSpec : love/forte/codepoet/java/CodeEmitter {
	public static final field Companion Llove/forte/codepoet/java/MethodSpec$Companion;
	public static fun constructorBuilder ()Llove/forte/codepoet/java/MethodSpec$Builder;
	public fun emit (Llove/forte/codepoet/java/CodeWriter;)V
	public abstract fun emit (Llove/forte/codepoet/java/CodeWriter;Ljava/lang/String;Ljava/util/Set;)V
	public static synthetic fun emit$default (Llove/forte/codepoet/java/MethodSpec;Llove/forte/codepoet/java/CodeWriter;Ljava/lang/String;Ljava/util/Set;ILjava/lang/Object;)V
	public abstract fun getAnnotations ()Ljava/util/List;
	public abstract fun getCode ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getDefaultValue ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getExceptions ()Ljava/util/List;
	public abstract fun getJavadoc ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getModifiers ()Ljava/util/Set;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getParameters ()Ljava/util/List;
	public abstract fun getReturnType ()Llove/forte/codepoet/java/TypeName;
	public abstract fun getTypeVariables ()Ljava/util/List;
	public fun hasModifier (Ljavax/lang/model/element/Modifier;)Z
	public fun isConstructor ()Z
	public abstract fun isVarargs ()Z
	public static fun methodBuilder (Ljava/lang/String;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public abstract fun toBuilder ()Llove/forte/codepoet/java/MethodSpec$Builder;
}

public final class love/forte/codepoet/java/MethodSpec$Builder {
	public final fun addAnnotation (Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addAnnotations (Ljava/lang/Iterable;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addAnnotations ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addCode (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addCode (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addCode (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addComment (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addException (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addExceptions (Ljava/lang/Iterable;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addExceptions ([Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addJavadoc (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addJavadoc (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addJavadoc (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addModifier (Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addModifiers (Ljava/lang/Iterable;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addModifiers ([Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addParameter (Llove/forte/codepoet/java/ParameterSpec;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addParameters (Ljava/lang/Iterable;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addParameters ([Llove/forte/codepoet/java/ParameterSpec;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addStatement (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addStatement (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addStatement (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addTypeVariable (Llove/forte/codepoet/java/TypeVariableName;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addTypeVariables (Ljava/lang/Iterable;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun addTypeVariables ([Llove/forte/codepoet/java/TypeVariableName;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun beginControlFlow (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun beginControlFlow (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun build ()Llove/forte/codepoet/java/MethodSpec;
	public final fun defaultValue (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun defaultValue (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun defaultValue (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun endControlFlow ()Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun getAnnotations ()Ljava/util/List;
	public final fun getCode ()Llove/forte/codepoet/java/CodeBlock$Builder;
	public final fun getModifiers ()Ljava/util/Set;
	public final fun getName ()Ljava/lang/String;
	public final fun getParameters ()Ljava/util/List;
	public final fun getTypeVariables ()Ljava/util/List;
	public final fun isVarargs ()Z
	public final fun nextControlFlow (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun nextControlFlow (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun returns (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun setName (Ljava/lang/String;)V
	public final fun setVarargs (Z)V
	public final fun varargs ()Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun varargs (Z)Llove/forte/codepoet/java/MethodSpec$Builder;
}

public final class love/forte/codepoet/java/MethodSpec$Companion {
	public final fun constructorBuilder ()Llove/forte/codepoet/java/MethodSpec$Builder;
	public final fun methodBuilder (Ljava/lang/String;)Llove/forte/codepoet/java/MethodSpec$Builder;
}

public final class love/forte/codepoet/java/MethodSpecs {
	public static final fun MethodSpec (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/MethodSpec;
	public static final fun MethodSpec (Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/MethodSpec;
	public static synthetic fun MethodSpec$default (Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/MethodSpec;
	public static synthetic fun MethodSpec$default (Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/MethodSpec;
	public static final fun addCode (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static synthetic fun addCode$default (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static final fun addComment (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static synthetic fun addComment$default (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static final fun addJavadoc (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static synthetic fun addJavadoc$default (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static final fun addStatement (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static synthetic fun addStatement$default (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static final fun beginControlFlow (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static synthetic fun beginControlFlow$default (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static final fun defaultValue (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static synthetic fun defaultValue$default (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static final fun nextControlFlow (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/MethodSpec$Builder;
	public static synthetic fun nextControlFlow$default (Llove/forte/codepoet/java/MethodSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/MethodSpec$Builder;
}

public final class love/forte/codepoet/java/NameAllocator {
	public static final field Companion Llove/forte/codepoet/java/NameAllocator$Companion;
	public fun <init> ()V
	public final fun get (Ljava/lang/Object;)Ljava/lang/String;
	public final fun newName (Ljava/lang/String;)Ljava/lang/String;
	public final fun newName (Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;
}

public final class love/forte/codepoet/java/NameAllocator$Companion {
}

public abstract interface class love/forte/codepoet/java/NonSealedTypeSpec : love/forte/codepoet/java/TypeSpec {
	public abstract fun getName ()Ljava/lang/String;
}

public final class love/forte/codepoet/java/NonSealedTypeSpec$Builder : love/forte/codepoet/java/TypeSpec$Builder {
	public fun <init> (Llove/forte/codepoet/java/TypeSpec$Kind;Ljava/lang/String;)V
	public fun build ()Llove/forte/codepoet/java/NonSealedTypeSpec;
	public synthetic fun build ()Llove/forte/codepoet/java/TypeSpec;
	public synthetic fun getSelf ()Llove/forte/codepoet/java/TypeSpec$Builder;
}

public abstract interface class love/forte/codepoet/java/ParameterSpec : love/forte/codepoet/java/CodeEmitter {
	public static final field Companion Llove/forte/codepoet/java/ParameterSpec$Companion;
	public static fun builder (Llove/forte/codepoet/java/TypeName;Ljava/lang/String;[Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public fun emit (Llove/forte/codepoet/java/CodeWriter;)V
	public abstract fun emit (Llove/forte/codepoet/java/CodeWriter;Z)V
	public static synthetic fun emit$default (Llove/forte/codepoet/java/ParameterSpec;Llove/forte/codepoet/java/CodeWriter;ZILjava/lang/Object;)V
	public abstract fun getAnnotations ()Ljava/util/List;
	public abstract fun getJavadoc ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getModifiers ()Ljava/util/Set;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getType ()Llove/forte/codepoet/java/TypeName;
	public fun hasModifier (Ljavax/lang/model/element/Modifier;)Z
	public abstract fun toBuilder ()Llove/forte/codepoet/java/ParameterSpec$Builder;
}

public final class love/forte/codepoet/java/ParameterSpec$Builder {
	public final fun addAnnotation (Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun addAnnotation (Llove/forte/codepoet/java/ClassName;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun addAnnotations (Ljava/lang/Iterable;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun addAnnotations ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun addJavadoc (Ljava/lang/String;[Llove/forte/codepoet/java/CodeArgumentPart;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun addJavadoc (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun addJavadoc (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun addModifier (Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun addModifiers (Ljava/lang/Iterable;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun addModifiers ([Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public final fun build ()Llove/forte/codepoet/java/ParameterSpec;
	public final fun getName ()Ljava/lang/String;
	public final fun getType ()Llove/forte/codepoet/java/TypeName;
}

public final class love/forte/codepoet/java/ParameterSpec$Companion {
	public final fun builder (Llove/forte/codepoet/java/TypeName;Ljava/lang/String;[Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/ParameterSpec$Builder;
}

public final class love/forte/codepoet/java/ParameterSpecs {
	public static final fun ParameterSpec (Llove/forte/codepoet/java/TypeName;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/ParameterSpec;
	public static synthetic fun ParameterSpec$default (Llove/forte/codepoet/java/TypeName;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/ParameterSpec;
	public static final fun addJavadoc (Llove/forte/codepoet/java/ParameterSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/ParameterSpec$Builder;
	public static synthetic fun addJavadoc$default (Llove/forte/codepoet/java/ParameterSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/ParameterSpec$Builder;
}

public abstract interface class love/forte/codepoet/java/ParameterizedTypeName : love/forte/codepoet/java/TypeName {
	public static final field Companion Llove/forte/codepoet/java/ParameterizedTypeName$Companion;
	public abstract fun annotated (Ljava/util/List;)Llove/forte/codepoet/java/ParameterizedTypeName;
	public fun annotated ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/ParameterizedTypeName;
	public synthetic fun annotated ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/TypeName;
	public abstract fun getRawType ()Llove/forte/codepoet/java/ClassName;
	public abstract fun getTypeArguments ()Ljava/util/List;
	public fun isPrimitive ()Z
	public abstract fun nestedClass (Ljava/lang/String;)Llove/forte/codepoet/java/ParameterizedTypeName;
	public abstract fun nestedClass (Ljava/lang/String;Ljava/util/List;)Llove/forte/codepoet/java/ParameterizedTypeName;
	public fun nestedClass (Ljava/lang/String;[Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/ParameterizedTypeName;
	public abstract fun withoutAnnotations ()Llove/forte/codepoet/java/ParameterizedTypeName;
}

public final class love/forte/codepoet/java/ParameterizedTypeName$Companion {
}

public final class love/forte/codepoet/java/ParameterizedTypeNames {
	public static final fun of (Ljava/lang/Class;[Ljava/lang/reflect/Type;)Llove/forte/codepoet/java/ParameterizedTypeName;
	public static final fun of (Ljava/lang/reflect/ParameterizedType;)Llove/forte/codepoet/java/ParameterizedTypeName;
	public static final fun of (Llove/forte/codepoet/java/ClassName;[Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/ParameterizedTypeName;
	public static final fun toParameterizedTypeName (Ljava/lang/reflect/ParameterizedType;)Llove/forte/codepoet/java/ParameterizedTypeName;
}

public abstract interface class love/forte/codepoet/java/RecordTypeSpec : love/forte/codepoet/java/TypeSpec {
	public abstract fun getMainConstructorParameters ()Ljava/util/List;
	public abstract fun getName ()Ljava/lang/String;
	public fun getSuperclass ()Llove/forte/codepoet/java/TypeName;
}

public final class love/forte/codepoet/java/RecordTypeSpec$Builder : love/forte/codepoet/java/TypeSpec$Builder {
	public fun <init> (Ljava/lang/String;)V
	public final fun addMainConstructorParameter (Llove/forte/codepoet/java/ParameterSpec;)Llove/forte/codepoet/java/RecordTypeSpec$Builder;
	public final fun addMainConstructorParameters (Ljava/lang/Iterable;)Llove/forte/codepoet/java/RecordTypeSpec$Builder;
	public final fun addMainConstructorParameters ([Llove/forte/codepoet/java/ParameterSpec;)Llove/forte/codepoet/java/RecordTypeSpec$Builder;
	public fun build ()Llove/forte/codepoet/java/RecordTypeSpec;
	public synthetic fun build ()Llove/forte/codepoet/java/TypeSpec;
	public synthetic fun getSelf ()Llove/forte/codepoet/java/TypeSpec$Builder;
}

public abstract interface class love/forte/codepoet/java/SealedTypeSpec : love/forte/codepoet/java/TypeSpec {
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getPermits ()Ljava/util/List;
}

public final class love/forte/codepoet/java/SealedTypeSpec$Builder : love/forte/codepoet/java/TypeSpec$Builder {
	public fun <init> (Llove/forte/codepoet/java/TypeSpec$Kind;Ljava/lang/String;)V
	public final fun addPermit (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/SealedTypeSpec$Builder;
	public final fun addPermits (Ljava/lang/Iterable;)Llove/forte/codepoet/java/SealedTypeSpec$Builder;
	public final fun addPermits ([Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/SealedTypeSpec$Builder;
	public fun build ()Llove/forte/codepoet/java/SealedTypeSpec;
	public synthetic fun build ()Llove/forte/codepoet/java/TypeSpec;
	public synthetic fun getSelf ()Llove/forte/codepoet/java/TypeSpec$Builder;
}

public abstract interface class love/forte/codepoet/java/SimpleTypeSpec : love/forte/codepoet/java/TypeSpec {
	public abstract fun getName ()Ljava/lang/String;
}

public final class love/forte/codepoet/java/SimpleTypeSpec$Builder : love/forte/codepoet/java/TypeSpec$Builder {
	public fun <init> (Llove/forte/codepoet/java/TypeSpec$Kind;Ljava/lang/String;)V
	public fun build ()Llove/forte/codepoet/java/SimpleTypeSpec;
	public synthetic fun build ()Llove/forte/codepoet/java/TypeSpec;
	public synthetic fun getSelf ()Llove/forte/codepoet/java/TypeSpec$Builder;
}

public abstract interface class love/forte/codepoet/java/SubtypeWildcardTypeName : love/forte/codepoet/java/WildcardTypeName {
	public fun getUpperBounds ()Ljava/util/List;
}

public abstract interface class love/forte/codepoet/java/SupertypeWildcardTypeName : love/forte/codepoet/java/WildcardTypeName {
	public fun getLowerBounds ()Ljava/util/List;
}

public abstract interface class love/forte/codepoet/java/TypeName : love/forte/codepoet/java/CodeEmitter {
	public abstract fun annotated (Ljava/util/List;)Llove/forte/codepoet/java/TypeName;
	public fun annotated ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/TypeName;
	public fun box ()Llove/forte/codepoet/java/TypeName;
	public abstract fun getAnnotations ()Ljava/util/List;
	public fun isAnnotated ()Z
	public abstract fun isPrimitive ()Z
	public fun unbox ()Llove/forte/codepoet/java/TypeName;
	public abstract fun withoutAnnotations ()Llove/forte/codepoet/java/TypeName;
}

public final class love/forte/codepoet/java/TypeName$Builtins {
	public static final field BOOLEAN Llove/forte/codepoet/java/TypeName;
	public static final field BYTE Llove/forte/codepoet/java/TypeName;
	public static final field CHAR Llove/forte/codepoet/java/TypeName;
	public static final field DOUBLE Llove/forte/codepoet/java/TypeName;
	public static final field FLOAT Llove/forte/codepoet/java/TypeName;
	public static final field INSTANCE Llove/forte/codepoet/java/TypeName$Builtins;
	public static final field INT Llove/forte/codepoet/java/TypeName;
	public static final field LONG Llove/forte/codepoet/java/TypeName;
	public static final field SHORT Llove/forte/codepoet/java/TypeName;
	public static final field VOID Llove/forte/codepoet/java/TypeName;
}

public final class love/forte/codepoet/java/TypeNames {
	public static final fun of (Ljava/lang/reflect/Type;)Llove/forte/codepoet/java/TypeName;
	public static final fun toTypeName (Ljava/lang/reflect/Type;)Llove/forte/codepoet/java/TypeName;
}

public abstract interface class love/forte/codepoet/java/TypeSpec : love/forte/codepoet/java/CodeEmitter {
	public static final field Companion Llove/forte/codepoet/java/TypeSpec$Companion;
	public fun emit (Llove/forte/codepoet/java/CodeWriter;)V
	public abstract fun emit (Llove/forte/codepoet/java/CodeWriter;Ljava/util/Set;)V
	public static synthetic fun emit$default (Llove/forte/codepoet/java/TypeSpec;Llove/forte/codepoet/java/CodeWriter;Ljava/util/Set;ILjava/lang/Object;)V
	public abstract fun getAnnotations ()Ljava/util/List;
	public abstract fun getFields ()Ljava/util/List;
	public abstract fun getInitializerBlock ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getJavadoc ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getKind ()Llove/forte/codepoet/java/TypeSpec$Kind;
	public abstract fun getMethods ()Ljava/util/List;
	public abstract fun getModifiers ()Ljava/util/Set;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getStaticBlock ()Llove/forte/codepoet/java/CodeBlock;
	public abstract fun getSuperclass ()Llove/forte/codepoet/java/TypeName;
	public abstract fun getSuperinterfaces ()Ljava/util/List;
	public abstract fun getTypeVariables ()Ljava/util/List;
	public abstract fun getTypes ()Ljava/util/List;
	public fun hasModifier (Ljavax/lang/model/element/Modifier;)Z
}

public abstract class love/forte/codepoet/java/TypeSpec$Builder {
	public synthetic fun <init> (Llove/forte/codepoet/java/TypeSpec$Kind;Ljava/lang/String;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun addAnnotation (Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addAnnotation (Llove/forte/codepoet/java/ClassName;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addAnnotations (Ljava/lang/Iterable;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addAnnotations ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addField (Llove/forte/codepoet/java/FieldSpec;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addFields (Ljava/lang/Iterable;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addFields ([Llove/forte/codepoet/java/FieldSpec;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addInitializerBlock (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addInitializerBlock (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addInitializerBlock (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public static synthetic fun addInitializerBlock$default (Llove/forte/codepoet/java/TypeSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addJavadoc (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addJavadoc (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addJavadoc (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public static synthetic fun addJavadoc$default (Llove/forte/codepoet/java/TypeSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addMethod (Llove/forte/codepoet/java/MethodSpec;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addMethods (Ljava/lang/Iterable;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addMethods ([Llove/forte/codepoet/java/MethodSpec;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addModifier (Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addModifiers (Ljava/lang/Iterable;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addModifiers ([Ljavax/lang/model/element/Modifier;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addStaticBlock (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addStaticBlock (Llove/forte/codepoet/java/CodeBlock;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addStaticBlock (Llove/forte/codepoet/java/CodeValue;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public static synthetic fun addStaticBlock$default (Llove/forte/codepoet/java/TypeSpec$Builder;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addSuperinterface (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addSuperinterfaces (Ljava/lang/Iterable;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addSuperinterfaces ([Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addType (Llove/forte/codepoet/java/TypeSpec;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addTypeVariable (Llove/forte/codepoet/java/TypeVariableName;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addTypeVariables (Ljava/lang/Iterable;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addTypeVariables ([Llove/forte/codepoet/java/TypeVariableName;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addTypes (Ljava/lang/Iterable;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun addTypes ([Llove/forte/codepoet/java/TypeSpec;)Llove/forte/codepoet/java/TypeSpec$Builder;
	public abstract fun build ()Llove/forte/codepoet/java/TypeSpec;
	public final fun getAnnotations ()Ljava/util/List;
	public final fun getFields ()Ljava/util/List;
	public final fun getKind ()Llove/forte/codepoet/java/TypeSpec$Kind;
	public final fun getMethods ()Ljava/util/List;
	public final fun getModifiers ()Ljava/util/Set;
	public final fun getName ()Ljava/lang/String;
	protected abstract fun getSelf ()Llove/forte/codepoet/java/TypeSpec$Builder;
	public final fun getSuperinterfaces ()Ljava/util/List;
	public final fun getTypeVariables ()Ljava/util/List;
	public final fun getTypes ()Ljava/util/List;
	public final fun superclass (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/TypeSpec$Builder;
}

public final class love/forte/codepoet/java/TypeSpec$Companion {
}

public final class love/forte/codepoet/java/TypeSpec$Kind : java/lang/Enum {
	public static final field ANNOTATION Llove/forte/codepoet/java/TypeSpec$Kind;
	public static final field CLASS Llove/forte/codepoet/java/TypeSpec$Kind;
	public static final field ENUM Llove/forte/codepoet/java/TypeSpec$Kind;
	public static final field INTERFACE Llove/forte/codepoet/java/TypeSpec$Kind;
	public static final field NON_SEALED_CLASS Llove/forte/codepoet/java/TypeSpec$Kind;
	public static final field NON_SEALED_INTERFACE Llove/forte/codepoet/java/TypeSpec$Kind;
	public static final field RECORD Llove/forte/codepoet/java/TypeSpec$Kind;
	public static final field SEALED_CLASS Llove/forte/codepoet/java/TypeSpec$Kind;
	public static final field SEALED_INTERFACE Llove/forte/codepoet/java/TypeSpec$Kind;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Llove/forte/codepoet/java/TypeSpec$Kind;
	public static fun values ()[Llove/forte/codepoet/java/TypeSpec$Kind;
}

public final class love/forte/codepoet/java/TypeSpecs {
	public static final fun SimpleTypeSpec (Llove/forte/codepoet/java/TypeSpec$Kind;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Llove/forte/codepoet/java/SimpleTypeSpec;
	public static synthetic fun SimpleTypeSpec$default (Llove/forte/codepoet/java/TypeSpec$Kind;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Llove/forte/codepoet/java/SimpleTypeSpec;
	public static final fun getNestedTypesSimpleNames (Llove/forte/codepoet/java/TypeSpec;)Ljava/util/Set;
}

public abstract interface class love/forte/codepoet/java/TypeVariableName : love/forte/codepoet/java/TypeName {
	public abstract fun annotated (Ljava/util/List;)Llove/forte/codepoet/java/TypeVariableName;
	public synthetic fun annotated ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/TypeName;
	public fun annotated ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/TypeVariableName;
	public abstract fun getBounds ()Ljava/util/List;
	public abstract fun getName ()Ljava/lang/String;
	public fun isPrimitive ()Z
	public abstract fun withBounds (Ljava/util/List;)Llove/forte/codepoet/java/TypeVariableName;
	public fun withBounds ([Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/TypeVariableName;
	public abstract fun withoutAnnotations ()Llove/forte/codepoet/java/TypeVariableName;
}

public final class love/forte/codepoet/java/TypeVariableNames {
	public static final fun of (Ljava/lang/String;)Llove/forte/codepoet/java/TypeVariableName;
	public static final fun of (Ljava/lang/String;Ljava/lang/Iterable;)Llove/forte/codepoet/java/TypeVariableName;
	public static final fun of (Ljava/lang/String;[Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/TypeVariableName;
	public static final fun of (Ljava/lang/reflect/TypeVariable;)Llove/forte/codepoet/java/TypeVariableName;
	public static final fun toTypeVariableName (Ljava/lang/reflect/TypeVariable;)Llove/forte/codepoet/java/TypeVariableName;
}

public final class love/forte/codepoet/java/Util_jvmKt$sam$i$java_util_function_BiFunction$0 : java/util/function/BiFunction {
	public fun <init> (Lkotlin/jvm/functions/Function2;)V
	public final synthetic fun apply (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class love/forte/codepoet/java/Util_jvmKt$sam$i$java_util_function_Function$0 : java/util/function/Function {
	public fun <init> (Lkotlin/jvm/functions/Function1;)V
	public final synthetic fun apply (Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract interface class love/forte/codepoet/java/WildcardTypeName : love/forte/codepoet/java/TypeName {
	public abstract fun annotated (Ljava/util/List;)Llove/forte/codepoet/java/WildcardTypeName;
	public synthetic fun annotated ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/TypeName;
	public fun annotated ([Llove/forte/codepoet/java/AnnotationSpec;)Llove/forte/codepoet/java/WildcardTypeName;
	public abstract fun getLowerBounds ()Ljava/util/List;
	public abstract fun getUpperBounds ()Ljava/util/List;
	public fun isPrimitive ()Z
	public abstract fun withoutAnnotations ()Llove/forte/codepoet/java/WildcardTypeName;
}

public final class love/forte/codepoet/java/WildcardTypeNames {
	public static final fun of (Ljava/lang/reflect/Type;)Llove/forte/codepoet/java/SubtypeWildcardTypeName;
	public static final fun of (Ljava/lang/reflect/Type;)Llove/forte/codepoet/java/SupertypeWildcardTypeName;
	public static final fun of (Ljava/util/List;)Llove/forte/codepoet/java/SubtypeWildcardTypeName;
	public static final fun of (Ljava/util/List;)Llove/forte/codepoet/java/SubtypeWildcardTypeName;
	public static final fun of (Ljava/util/List;)Llove/forte/codepoet/java/SupertypeWildcardTypeName;
	public static final fun of (Ljava/util/List;)Llove/forte/codepoet/java/SupertypeWildcardTypeName;
	public static final fun of (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/SubtypeWildcardTypeName;
	public static final fun of (Llove/forte/codepoet/java/TypeName;)Llove/forte/codepoet/java/SupertypeWildcardTypeName;
}

